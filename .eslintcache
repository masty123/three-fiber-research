[{"/Users/theeruthborisuth/Documents/3d_search_stuff/three-fiber-research/src/index.js":"1","/Users/theeruthborisuth/Documents/3d_search_stuff/three-fiber-research/src/reportWebVitals.js":"2","/Users/theeruthborisuth/Documents/3d_search_stuff/three-fiber-research/src/App.js":"3"},{"size":525,"mtime":1613984792412,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1613379638311,"results":"6","hashOfConfig":"5"},{"size":17780,"mtime":1614753698595,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"14ma97a",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/theeruthborisuth/Documents/3d_search_stuff/three-fiber-research/src/index.js",[],["16","17"],"/Users/theeruthborisuth/Documents/3d_search_stuff/three-fiber-research/src/reportWebVitals.js",[],"/Users/theeruthborisuth/Documents/3d_search_stuff/three-fiber-research/src/App.js",["18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42"],"import React, { Suspense, useRef, useState, useEffect, useMemo } from \"react\"\nimport { Canvas, useFrame, useThree,  } from \"react-three-fiber\"\nimport { ContactShadows,  useGLTF, OrbitControls, useAnimations, Plane, Circle, Sphere, Tube, MeshWobbleMaterial, } from \"drei\"\nimport { HexColorPicker } from \"react-colorful\"\nimport { proxy, useProxy } from \"valtio\"\nimport * as THREE from 'three'\n// Using a Valtio state model to bridge reactivity between\n// the canvas and the dom, both can write to it and/or react to it.\nconst dummy = new THREE.Vector3()\nconst lookAtPos = new THREE.Vector3()\nconst FocusVector3 = new THREE.Vector3()\n\nfunction Shoe() {\n  const ref = useRef()\n  // Drei's useGLTF hook sets up draco automatically, that's how it differs from useLoader(GLTFLoader, url)\n  // { nodes, materials } are extras that come from useLoader, these do not exist in threejs/GLTFLoader\n  // nodes is a named collection of meshes, materials a named collection of materials\n  const { nodes, materials } = useGLTF(\"shoe-draco.glb\")\n\n  // Using the GLTFJSX output here to wire in app-state and hook up events\n  return (\n    <group>\n      <mesh geometry={nodes.shoe.geometry} material={materials.laces}  />\n      <mesh geometry={nodes.shoe_1.geometry} material={materials.mesh}  />\n      <mesh geometry={nodes.shoe_2.geometry} material={materials.caps}  />\n      <mesh geometry={nodes.shoe_3.geometry} material={materials.inner} />\n      <mesh geometry={nodes.shoe_4.geometry} material={materials.sole}  />\n      <mesh geometry={nodes.shoe_5.geometry} material={materials.stripes}  />\n      <mesh geometry={nodes.shoe_6.geometry} material={materials.band}  />\n      <mesh geometry={nodes.shoe_7.geometry} material={materials.patch} />\n    </group>\n  )\n}\n\nfunction Model() {\n  const group = useRef()\n  const { nodes, materials, animations } = useGLTF(\"jule.glb\")\n  const { actions } = useAnimations(animations, group)\n  console.log(actions);\n  useFrame(() => {\n    group.current.rotation.y += 0.001;\n  })\n  useEffect(() => {\n    actions.Idle.play();\n    actions.Idle_Wrench.play();\n\n  })\n  return (\n    <group ref={group} dispose={null} scale={[0.02, 0.02, 0.02]} position={[0, -1.6, 0]}>\n      <group name=\"F_MED_Mechanical_Engineerao\">\n        <primitive object={nodes.pelvis} />\n        <skinnedMesh\n          material={materials.F_MED_Mechanical_Engineer_Body_T1}\n          geometry={nodes.F_MED_Mechanical_Engineermd.geometry}\n          skeleton={nodes.F_MED_Mechanical_Engineermd.skeleton}\n        />\n        <skinnedMesh\n          material={materials.F_MED_Mechanical_Engineer_Head}\n          geometry={nodes.F_MED_Mechanical_Engineermd_1.geometry}\n          skeleton={nodes.F_MED_Mechanical_Engineermd_1.skeleton}\n        />\n        <skinnedMesh\n          material={materials.F_MED_Mechanical_Engineer_FaceAcc_T1}\n          geometry={nodes.F_MED_Mechanical_Engineermd_2.geometry}\n          skeleton={nodes.F_MED_Mechanical_Engineermd_2.skeleton}\n        />\n      </group>\n      <group name=\"Mechanical_Engineer_Female_Gliderao\" position={[45.49, 28.45, -5.73]} rotation={[0, 0.51, 0]} scale={[1.15, 1.15, 1.15]}>\n        <primitive object={nodes.wrench_body} />\n        <skinnedMesh\n          material={materials.MI_Pets_Mechanical_Engineer_Owl}\n          geometry={nodes.Mechanical_Engineer_Female_Glidermo.geometry}\n          skeleton={nodes.Mechanical_Engineer_Female_Glidermo.skeleton}\n        />\n      </group>\n    </group>\n  )\n}\n\nfunction Pipe(props) {\n  // ---------------- Camera Section ------------ //\n  // const camRef = useRef()\n  // const { setDefaultCamera } = useThree()\n  // // Make the camera known to the system\n  // useEffect(() => void setDefaultCamera(camRef.current), [])\n  // // Update it every frame\n  // useFrame(() => camRef.current.updateMatrixWorld())\n  // ------------------------------------------- //\n  const [zoom, setZoom] = useState(false)\n\n\n\n  const group = useRef();\n  const snap = useProxy(state);\n  // const snap = useProxy(state_2);\n  const { nodes, materials } = useGLTF('pipes_within_pipe.glb');\n  const [hover,   set]      = useState(null)\n  // const [hovered, setHover] = useState(false)\n\n  const points = []\n  points.push(new THREE.Vector3(-10, 0, 0))\n  points.push(new THREE.Vector3(0, 10, 0))\n  points.push(new THREE.Vector3(10, 0, 0))\n\n  const lineGeometry = new THREE.BufferGeometry().setFromPoints(points)\n\n  useFrame((state, delta) => {\n    const step = 0.08\n    state.camera.fov = THREE.MathUtils.lerp(state.camera.fov, zoom ? 40 : 20, step)\n    state.camera.position.lerp(dummy.set( \n      zoom ? FocusVector3.x : 3,          //    x-axis of camera position\n      zoom ? FocusVector3.y : 1.5,        //    y-axis of camera position\n      zoom ? 1.35 : 3),                   //    z-axis of camera position\n      step                                //    time that camera lerp\n      )             \n\n    // lookAtPos.x = Math.sin(state.clock.getElapsedTime() * 2)       // camera sway?? dizzy as heck\n\n    state.camera.lookAt(lookAtPos)\n    state.camera.updateProjectionMatrix()\n  })\n\n\n  return (\n    <>\n    {/* <perspectiveCamera ref={camRef} position={[0,0,0]}  zoom={1}  /> */}\n\n    <group ref={group} {...props} dispose={null} position={[0,0,0]}\n      // onPointerOver   = {(e) => (e.stopPropagation(), set(e.object.name))}\n      // onPointerOver = {(e) => {    \n      //   e.stopPropagation(); \n      //   if(e.object.name.includes(\"sub\")){\n      //     state.current = e.object.name;\n      //     state.items[e.object.name] = \"#F6653E\";\n      //   }\n      //   else {\n      //     state.current = e.object.name;\n      //     state.items[e.object.name] = \"#F4FF02\";\n      //   }\n      // }}\n      onPointerOut  = {(e) => {\n          e.intersections.length=== 0 && set(null); \n          // state.items[e.object.name] = \"#999999\"; \n          // state.current = null;\n      }}\n      onPointerDown   = {(e) => {\n        e.stopPropagation(); \n        // change colour on the model\n        if(e.object.name.includes(\"sub\")){\n          state.items[state.current] = \"#999999\"\n          state.current = e.object.name;\n          state.items[e.object.name] = \"#F6653E\";\n          model_info.current = {\n            name:             e.object.name,\n            is_main_duct:     e.object.is_main_duct,          \n            sub_duct_count:   e.object.sub_duct_count,\n            sub_fiber_count:  e.object.sub_fiber_count,\n          }\n        }\n        else if (e.object.name.includes(\"main\")) {\n          state.items[state.current] = \"#999999\"\n          state.current = e.object.name;\n          state.items[e.object.name] = \"#F4FF02\";\n          model_info.current = {\n            name:             e.object.name,\n            is_main_duct:     e.object.is_main_duct,          \n            sub_duct_count:   e.object.sub_duct_count,\n            sub_fiber_count:  e.object.sub_fiber_count,\n          }\n        }\n        FocusVector3.set(e.point.x, e.point.y, e.point.z );         // set vector from pointer position\n        setZoom((zoom) => true);                                    // start zoom\n        // state.current = e.object.name;\n      }}\n      onPointerMissed = {(e) => {\n        setZoom((zoom) => false);                 // if clicking a non model it will zoom out\n        state.items[state.current] = \"#999999\"    // reset color\n        state.current = null;                     // disable color\n        model_info.current = null;\n      }}\n    >\n          <mesh \n            // material={materials.DefaultMaterial}\n            material-color={snap.items.main_pipe}\n            geometry={nodes.defaultMaterial002.geometry} \n            castShadow\n            \n            name=\"main_pipe\"\n            is_main_duct={true}\n            sub_duct_count={4}\n          >\n                  <meshToonMaterial  color={'#999999'} />\n          </mesh>\n\n          <mesh\n            // material={materials.DefaultMaterial}\n            material-color={snap.items.sub_pipe_01}\n            geometry={nodes.defaultMaterial004.geometry}\n            position={[-0.05, 0.04, 0]}\n            scale={[0.23, 0.23, 1]}\n\n            name=\"sub_pipe_01\"\n            is_main_duct={false}\n            sub_fiber_count={23}\n          >\n                <meshToonMaterial color={'#999999'} />\n          </mesh>\n\n          <mesh\n            // material={materials.DefaultMaterial}\n            material-color={snap.items.sub_pipe_02}\n            geometry={nodes.defaultMaterial008.geometry}\n            position={[0.05, 0.04, 0]}\n            scale={[0.23, 0.23, 1]}\n\n            name=\"sub_pipe_02\"\n            is_main_duct={false}\n            sub_fiber_count={15}\n          >\n               <meshToonMaterial color={'#999999'} />\n          </mesh>\n\n          <mesh\n            // material={materials.DefaultMaterial}\n            material-color={snap.items.sub_pipe_03}\n            // material={new THREE.MeshBasicMaterial({ color: new THREE.Color('green')})}\n            geometry={nodes.defaultMaterial010.geometry}\n            position={[-0.05, -0.04, 0]}\n            scale={[0.23, 0.23, 1]}\n\n            name=\"sub_pipe_03\" \n            is_main_duct={false}       \n            sub_fiber_count={42}\n          >\n                  <meshToonMaterial color={'#999999'} />\n          </mesh>\n\n          <mesh\n            // material={materials.DefaultMaterial}\n            material-color={snap.items.sub_pipe_04}\n            geometry={nodes.defaultMaterial006.geometry}\n            position={[0.05, -0.04, 0]}\n            scale={[0.23, 0.23, 1]}\n\n            name=\"sub_pipe_04\"\n            is_main_duct={false}               \n            sub_fiber_count={25}\n          >\n                <meshToonMaterial color={'#999999'} />\n          </mesh>       \n  \n    </group>\n\n    <OrbitControls \n          // minPolarAngle={Math.PI / 2}            // min angle thingy\n          // maxPolarAngle={Math.PI / 2}            // min angle thingy\n          // enableZoom={true} \n          enablePan={true} \n    />\n    </>\n  )\n}\n\n\nfunction renderInfo(item){\n  if(item.current){\n    if(item.current.is_main_duct == true){\n      return  <>\n            <h2>Main-duct Name: {item.current.name}</h2>\n            <h2>Sub-duct count: {item.current.sub_duct_count}</h2>\n        </>\n      } else if (item.current.is_main_duct == false) {\n        return <>\n          <h2>Sub-duct name: {item.current.name}</h2>\n          <h2>Fiber line quantity: {item.current.sub_fiber_count}</h2>\n        </>\n    }\n  }\n}\n\n\n// render text\nfunction Picker(){\n    const snap = useProxy(state);\n    return (\n      <div className=\"picker\" style={{display: \"block\"}}>\n            {/* <HexColorPickercolor={snap.items[snap.current]} onChange={(color) => (state.items[snap.current] = color)}/> */}\n            <h1>Location: {!model_info.title ? \"Unknown\" : model_info.title }</h1>\n            {renderInfo(model_info)}\n\n      </div>\n    )\n}\n\n\nconst state = proxy({\n  current: null,\n  items: {\n    // mat_01: \"#999999\",\n    // main_front_screw: \"#999999\",\n    // first_sub_screw: \"#999999\",\n    // fourth_sub_screw: \"#999999\",\n    // second_sub_screw: \"#999999\",\n    // third_sub_screw: \"#999999\",\n    main_pipe: \"#999999\",\n    sub_pipe_01: \"#999999\",\n    sub_pipe_02: \"#999999\",\n    sub_pipe_04: \"#999999\",\n    sub_pipe_03: \"#999999\",\n  },\n  sub_items: {\n    sub_pipe_01: 40,\n    sub_pipe_02: 22,\n    sub_pipe_04: 14,\n    sub_pipe_03: 56,\n  }\n})\n\nconst model_info = proxy({\n  current: null,\n  title: \"Kasetsart University\"\n})\n\n\n// Separate Camera unsed\nfunction Camera(props) {\n  const ref = useRef()\n  const { setDefaultCamera } = useThree()\n  // Make the camera known to the system\n  useEffect(() => void setDefaultCamera(ref.current), [])\n  // Update it every frame\n  useFrame(() => ref.current.updateMatrixWorld())\n  return \n}\n\nexport default function App() {\n\n\n  const [curve] = useState(() => {\n    // Create an empty array to stores the points\n    let points = [];\n    // Define points along Z axis\n\n    for (let i = 0; i < 30; i += 1){\n      points.push(\n        new THREE.Vector3(\n          0,\n          0 ,\n          -(i / 4)\n        ),\n      );}\n\n    return new THREE.CatmullRomCurve3(points);\n  });\n\n  return (\n    \n    <>  \n        <Canvas        \n         pixelRatio={window.devicePixelRatio}\n         className=\"container\"\n         concurrent\n         shadowMap\n         >\n          <directionalLight intensity={0.5} castShadow shadow-mapSize-height={512} shadow-mapSize-width={512}/>\n          <spotLight intensity={0.3} angle={0.1} penumbra={1} position={[5, 25, 20]} />\n          {/* <fog attach=\"fog\" args={[\"white\", 0, 40]} /> */}\n          <ambientLight intensity={0.1} />\n          <Suspense fallback={null}>\n             <Pipe/>      \n            <Circle receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={[0, -1, 0]} args={[1, 15]}>    //radius, polygon\n                <meshStandardMaterial attach=\"material\" color=\"white\" />\n            </Circle> \n\n            {/* generated tube (still research) */}\n            {/* <Tube\n               args={[\n                 curve,     // vector3 curve\n                 2,         // tubular segment\n                 0.5,       // radius\n                 10,        // polygon\n                 5,         // radius segment\n                 false      // closed tube??\n                ]}\n                position={[0,0,1.75]}\n            >\n              <meshToonMaterial attach=\"material\" color=\"lime\" />       \n            </Tube>\n\n          <OrbitControls \n            // minPolarAngle={Math.PI / 2}            // min angle thingy\n            maxPolarAngle={Math.PI / 2}            // min angle thingy\n            // enableZoom={true} \n            enablePan={true} \n          /> */}\n         </Suspense>\n       </Canvas>\n       <Picker/>\n    </>\n  \n  )\n}\n\n           {/* <ContactShadows rotation-x={Math.PI / 2} position={[0, -1, 0]} opacity={1} width={1} height={1}  blur={1} far={1} /> */}\n                 {/* <MeshWobbleMaterial\n                attach=\"material\"\n                factor={1} // Strength, 0 disables the effect (default=1)\n                speed={10} // Speed (default=1)\n              /> */}\n\n    // <> \n    // <Canvas        \n    //     pixelRatio={window.devicePixelRatio}\n    //     className=\"container\"\n    //     concurrent\n    //     camera={{ position: [0, 0, 2.5], }}\n    //     >\n    //   <ambientLight intensity={0.3} />\n    //   <pointLight position={[20, 20, 20]} />\n    //     <spotLight intensity={0.3} angle={0.1} penumbra={1} position={[5, 25, 20]} />\n    //     <Suspense fallback={null}>\n    //          {/* <Shoe /> */}\n    //         <Model/>\n          \n    //        {/* <ContactShadows rotation-x={Math.PI / 2} position={[0, -1, 0]} opacity={1} width={1} height={1}  blur={1} far={1} /> */}\n    //     </Suspense>\n    //     <OrbitControls minPolarAngle={Math.PI / 2} maxPolarAngle={Math.PI / 2} enableZoom={true} enablePan={false} />\n    //   </Canvas>\n\n    //       <img src=\"./fortnite_logo.png\" className=\"title\" width=\"400\" />\n    // </>\n\n//  <>\n// <Canvas        \n//   pixelRatio={window.devicePixelRatio}\n//   className=\"container\"\n//   concurrent\n//   shadowMap\n//   camera={{ position: [0, 0, 5], }}\n//   >\n//    <Suspense fallback={null}>\n// <directionalLight\n//   intensity={0.5}\n//   castShadow\n//   shadow-mapSize-height={512}\n//   shadow-mapSize-width={512}\n// />\n//          <ambientLight intensity={0.1} />\n//         <directionalLight\n//           intensity={0.5}\n//           castShadow\n//           shadow-mapSize-height={512}\n//           shadow-mapSize-width={512}\n//         />\n\n     \n//    <OrbitControls />\n// </Suspense>\n// </Canvas>\n// </> \n\n\n        {/* <mesh \n            material-color={snap.items.main_second_screw}\n            // material={materials.DefaultMaterial} \n            material={new THREE.MeshBasicMaterial({ color: new THREE.Color('#B6B6B6')})} \n            geometry={nodes.defaultMaterial001.geometry} \n          />\n          <mesh \n            material-color={snap.items.main_front_screw}\n            // material={materials.DefaultMaterial}\n            material={new THREE.MeshBasicMaterial({ color: new THREE.Color('#B6B6B6')})} \n            geometry={nodes.defaultMaterial.geometry} \n            name=\"main front screw\"\n\n          /> */}\n\n\n          {/* sub pipe screws */}\n          {/* <mesh\n            material-color={snap.items.first_sub_screw}\n            // material={materials.DefaultMaterial}\n            material={new THREE.MeshBasicMaterial({ color: new THREE.Color('#B6B6B6')})}\n            geometry={nodes.defaultMaterial003.geometry}\n            position={[-0.05, 0.04, 0]}\n            scale={[0.23, 0.23, 1]}\n            name=\"first sub screw\"\n\n          />\n          <mesh\n            material-color={snap.items.fourth_sub_screw}\n            // material={materials.DefaultMaterial}\n            material={new THREE.MeshBasicMaterial({ color: new THREE.Color('#B6B6B6')})}\n            geometry={nodes.defaultMaterial005.geometry}\n            position={[0.05, -0.04, 0]}\n            scale={[0.23, 0.23, 1]}\n            name=\"fourth sub screw\"\n\n          />\n          <mesh\n            material-color={snap.items.second_sub_screw}\n            // material={materials.DefaultMaterial}\n            material={new THREE.MeshBasicMaterial({ color: new THREE.Color('#B6B6B6')})}\n            geometry={nodes.defaultMaterial007.geometry}\n            position={[0.05, 0.04, 0]}\n            scale={[0.23, 0.23, 1]}\n            name=\"second sub screw\"\n\n          />\n          <mesh\n            material-color={snap.items.third_sub_screw}\n            // material={materials.DefaultMaterial}\n            material={new THREE.MeshBasicMaterial({ color: new THREE.Color('#B6B6B6')})}\n\n            geometry={nodes.defaultMaterial009.geometry}\n            position={[-0.05, -0.04, 0]}\n            scale={[0.23, 0.23, 1]}\n            name=\"main pipe\"\n          /> */}",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":56,"nodeType":"49","messageId":"50","endLine":1,"endColumn":63},{"ruleId":"47","severity":1,"message":"51","line":3,"column":10,"nodeType":"49","messageId":"50","endLine":3,"endColumn":24},{"ruleId":"47","severity":1,"message":"52","line":3,"column":66,"nodeType":"49","messageId":"50","endLine":3,"endColumn":71},{"ruleId":"47","severity":1,"message":"53","line":3,"column":81,"nodeType":"49","messageId":"50","endLine":3,"endColumn":87},{"ruleId":"47","severity":1,"message":"54","line":3,"column":89,"nodeType":"49","messageId":"50","endLine":3,"endColumn":93},{"ruleId":"47","severity":1,"message":"55","line":3,"column":95,"nodeType":"49","messageId":"50","endLine":3,"endColumn":113},{"ruleId":"47","severity":1,"message":"56","line":4,"column":10,"nodeType":"49","messageId":"50","endLine":4,"endColumn":24},{"ruleId":"47","severity":1,"message":"57","line":13,"column":10,"nodeType":"49","messageId":"50","endLine":13,"endColumn":14},{"ruleId":"47","severity":1,"message":"58","line":14,"column":9,"nodeType":"49","messageId":"50","endLine":14,"endColumn":12},{"ruleId":"47","severity":1,"message":"59","line":35,"column":10,"nodeType":"49","messageId":"50","endLine":35,"endColumn":15},{"ruleId":"47","severity":1,"message":"60","line":96,"column":18,"nodeType":"49","messageId":"50","endLine":96,"endColumn":27},{"ruleId":"47","severity":1,"message":"61","line":97,"column":10,"nodeType":"49","messageId":"50","endLine":97,"endColumn":15},{"ruleId":"47","severity":1,"message":"62","line":105,"column":9,"nodeType":"49","messageId":"50","endLine":105,"endColumn":21},{"ruleId":"63","severity":1,"message":"64","line":267,"column":34,"nodeType":"65","messageId":"66","endLine":267,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":272,"column":44,"nodeType":"65","messageId":"66","endLine":272,"endColumn":46},{"ruleId":"47","severity":1,"message":"67","line":284,"column":11,"nodeType":"49","messageId":"50","endLine":284,"endColumn":15},{"ruleId":"47","severity":1,"message":"68","line":326,"column":10,"nodeType":"49","messageId":"50","endLine":326,"endColumn":16},{"ruleId":"69","severity":1,"message":"70","line":330,"column":55,"nodeType":"71","endLine":330,"endColumn":57,"suggestions":"72"},{"ruleId":"47","severity":1,"message":"73","line":339,"column":10,"nodeType":"49","messageId":"50","endLine":339,"endColumn":15},{"ruleId":"74","severity":1,"message":"75","line":371,"column":104,"nodeType":"76","endLine":372,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":404,"column":12,"nodeType":"79","messageId":"80","endLine":404,"endColumn":136},{"ruleId":"77","severity":1,"message":"78","line":405,"column":18,"nodeType":"79","messageId":"80","endLine":409,"endColumn":21},{"ruleId":"77","severity":1,"message":"78","line":463,"column":9,"nodeType":"79","messageId":"80","endLine":476,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":479,"column":11,"nodeType":"79","messageId":"80","endLine":479,"endColumn":34},{"ruleId":"77","severity":1,"message":"78","line":480,"column":11,"nodeType":"79","messageId":"80","endLine":519,"endColumn":17},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'ContactShadows' is defined but never used.","'Plane' is defined but never used.","'Sphere' is defined but never used.","'Tube' is defined but never used.","'MeshWobbleMaterial' is defined but never used.","'HexColorPicker' is defined but never used.","'Shoe' is defined but never used.","'ref' is assigned a value but never used.","'Model' is defined but never used.","'materials' is assigned a value but never used.","'hover' is assigned a value but never used.","'lineGeometry' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'snap' is assigned a value but never used.","'Camera' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setDefaultCamera'. Either include it or remove the dependency array.","ArrayExpression",["83"],"'curve' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Update the dependencies array to be: [setDefaultCamera]",{"range":"86","text":"87"},[11600,11602],"[setDefaultCamera]"]